{
  "hash": "e63e1a2bb44e4a251aeaac73cee59d9e",
  "result": {
    "markdown": "---\ntitle: \"Netflix titles per country\"\ndate: 2021-04-30\ncategories: [code, analysis, tidytuesday]\nimage: \"image.jpg\"\nexecute: \n  cache: true\ncitation: true\n---\n\n\nSince Netflix has been dominating all the straemaing platforms, several months ago decided to analyze the releasing titles nationality. This was possible by using several rstats libraries and the released dataset on the [TidyTuesday](https://github.com/rfordatascience/tidytuesday) project.\n\n\n::: {.cell hash='netflix_cache/html/libs_0a0d28360c3b48d97e313f278ae2775c'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(ggprism)\nlibrary(gganimate)\nlibrary(gifski)\nlibrary(lubridate)\ntheme_set(theme_minimal())\n```\n:::\n\n\n# Data import\n\n\n::: {.cell hash='netflix_cache/html/import-cleaning_0c3ee9053edf20f82757e6c719e8354b'}\n\n```{.r .cell-code}\nnetflix_titles <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-20/netflix_titles.csv') |>\n  mutate(date_added = mdy(date_added)) |>\n  mutate(year_added = year(date_added))\n```\n:::\n\n\n\nReleased titles in 2020\n\n\n::: {.cell hash='netflix_cache/html/unnamed-chunk-3_68a6eee753d5d59a3356c38aa69bec8d'}\n\n```{.r .cell-code}\n(\nmovies_country_year <- netflix_titles |> \n  select(country, release_year, type) |> \n  filter(release_year == 2020, !is.na(country)) |> \n  separate_rows(country, sep = \", \") |> \n  count(country = fct_lump(country, 10), sort = TRUE, type) |> \n  filter(country != \"Other\")\n)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"country\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"United States\",\"2\":\"TV Show\",\"3\":\"197\"},{\"1\":\"United States\",\"2\":\"Movie\",\"3\":\"180\"},{\"1\":\"India\",\"2\":\"Movie\",\"3\":\"52\"},{\"1\":\"United Kingdom\",\"2\":\"TV Show\",\"3\":\"42\"},{\"1\":\"South Korea\",\"2\":\"TV Show\",\"3\":\"27\"},{\"1\":\"United Kingdom\",\"2\":\"Movie\",\"3\":\"26\"},{\"1\":\"Canada\",\"2\":\"Movie\",\"3\":\"21\"},{\"1\":\"Canada\",\"2\":\"TV Show\",\"3\":\"20\"},{\"1\":\"Germany\",\"2\":\"TV Show\",\"3\":\"20\"},{\"1\":\"Spain\",\"2\":\"TV Show\",\"3\":\"17\"},{\"1\":\"India\",\"2\":\"TV Show\",\"3\":\"16\"},{\"1\":\"Japan\",\"2\":\"TV Show\",\"3\":\"15\"},{\"1\":\"France\",\"2\":\"Movie\",\"3\":\"13\"},{\"1\":\"France\",\"2\":\"TV Show\",\"3\":\"13\"},{\"1\":\"Spain\",\"2\":\"Movie\",\"3\":\"13\"},{\"1\":\"Brazil\",\"2\":\"TV Show\",\"3\":\"12\"},{\"1\":\"Germany\",\"2\":\"Movie\",\"3\":\"12\"},{\"1\":\"Brazil\",\"2\":\"Movie\",\"3\":\"11\"},{\"1\":\"Japan\",\"2\":\"Movie\",\"3\":\"7\"},{\"1\":\"South Korea\",\"2\":\"Movie\",\"3\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell hash='netflix_cache/html/exploratory_e92a561f5da69e96cc18a40049e4d758'}\n\n```{.r .cell-code}\nggplot(movies_country_year, aes(n, reorder(country, n), label = n, fill = type)) +\n  geom_col(alpha = 0.7, width = 0.7, position = \"dodge2\") +\n  geom_text(size = 3, color = \"white\",  position = position_dodge(width = 0.8), hjust = -1) +\n  labs(\n    y = \"\",\n    x = \"\",\n    title = \"Released titles in 2020 available in Netflix\",\n    subtitle = \"Frequency of movies releases during 2020 (the pandemic) per country, that are available in Netflix \\n(Date do not correspond to Netflix release, but to the movies theirselves)\",\n    caption = \"Data: Kaggle \\n#TidyTuesday: 2021-04-17 \\nPlot: @Gaspardelanoche\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"#111111\"),\n    panel.grid = element_line(color = \"#333333\", linetype = \"dotted\", size = 0.2),\n    panel.background = element_rect(fill = \"#111111\"),\n    axis.text.x = element_text(color = \"white\"),\n    axis.title = element_text(color = \"white\"),\n    axis.text.y = element_text(color = \"white\"),\n    axis.line = element_line(color = \"#333333\"),\n    axis.ticks = element_line(color = \"gray30\"),\n    plot.title = element_text(color = \"red\", size = 20),\n    plot.subtitle = element_text(color = \"white\", size = 13),\n    plot.caption = element_text(color = \"white\", size = 11),\n    legend.text = element_text(color = \"white\"),\n    legend.background = element_rect(fill = \"#111111\"),\n    legend.position = \"bottom\",\n    legend.title = element_blank()\n  ) +\n  scale_fill_manual(values = c(\"#FAF5FF\",\"#FF0000\"))\n```\n\n::: {.cell-output-display}\n![](netflix_files/figure-html/exploratory-1.png){width=3000}\n:::\n:::\n\n\n# Releases titles animated\n\n\n::: {.cell hash='netflix_cache/html/animation-data_1cd206e74a5447104c03e22b229e03a6'}\n\n```{.r .cell-code}\n(\nmovies_country_years <- netflix_titles |> \n  select(country, release_year, type) |> \n  filter(!is.na(country), !is.na(release_year)) |> \n  separate_rows(country, sep = \", \") |> \n  count(country = fct_lump(country,10), sort = TRUE, release_year) |> \n  pivot_wider(names_from = release_year, values_from = n) |>\n  # mutate(vars(\"2018\":\"2011\"), ~ if_else(is.na(.), '0', .))\n  mutate(across(everything(), ~replace_na(., 0)))\n  # pivot_longer(!c(country,), names_to = \"release_year\",  values_to = \"n\") |> \n  # filter(country != \"Other\") |> \n  # group_by(country) |> \n  # arrange(release_year) |>\n  # summarize(release_year, cumsum = cumsum(n), n, .groups = \"drop\") |>\n  # # ungroup() |> \n  # group_by(release_year) |> \n  # mutate(ordering = rank(cumsum, ties.method = \"first\"), release_year = as.integer(release_year), cumsum_lab = as.character(cumsum))\n)\n```\n:::\n\n::: {.cell hash='netflix_cache/html/animation_e24aa057d9400be000f537e4f546a049'}\n\n```{.r .cell-code}\nmovies_country_years_animated <- ggplot(movies_country_years, aes(ordering, group = country)) +\n  geom_tile(aes(y = cumsum/2, height = cumsum, width = 0.9), alpha = 0.5, fill = \"red\") +\n  geom_text(aes(y = 0, label = country), hjust = 1.1, color = \"white\") +\n  geom_text(aes(y = cumsum, label = cumsum_lab), size = 3, color = \"white\", hjust = -0.5) +\n  coord_flip(clip = \"off\", expand = FALSE) +  \n  labs(\n    y = \"\",\n    x = \"\",\n    title = \"Released titles in {frame_time} available in Netflix\",\n    subtitle = \"Frequency of movies released in {frame_time} country, that are available in Netflix \\n(Date do not correspond to Netflix release, but to the movies theirselves)\",\n    caption = \"Data: Kaggle \\n#TidyTuesday: 2021-04-17 \\nPlot: @Gaspardelanoche\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"#111111\"),\n    panel.grid = element_line(color = \"#333333\", linetype = \"dotted\", size = 0.2),\n    panel.background = element_rect(fill = \"#111111\"),\n    axis.text.x = element_text(color = \"white\"),\n    axis.title = element_text(color = \"white\"),\n    axis.text.y = element_blank(),\n    axis.line = element_line(color = \"#333333\"),\n    axis.ticks = element_line(color = \"gray30\"),\n    plot.title = element_text(color = \"red\", size = 20),\n    plot.subtitle = element_text(color = \"white\", size = 13),\n    plot.caption = element_text(color = \"white\", size = 11),\n    legend.text = element_text(color = \"white\"),\n    legend.title = element_blank(),\n    plot.margin = margin(4, 4, 4, 4, \"cm\")\n  )  +\n  transition_time(release_year) +\n  ease_aes('bounce-in-out')\n\ngganimate::animate(movies_country_years_animated, nframes = 500, fps = 10, width = 800, height = 800, end_pause = 25)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}