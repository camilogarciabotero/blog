{
  "hash": "c1527f953d11163e4e685ea7fbbde329",
  "result": {
    "markdown": "---\ntitle: \"K-mer counts on genomes\"\ndate: 2021-02-25\ncategories: [bioinformatics, code, analysis]\nfig-width: 10\nfig-height: 12\nfig-dpi: 300\nexecute: \n  cache: true\n---\n\n\n\n# Libraries\n\n\n::: {.cell hash='kmer_counts_cache/html/libraries_ca79fec118cc58ae3a56c8bccd9a3486'}\n\n```{.r .cell-code}\nlibrary(fs)\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(reticulate)\nlibrary(ggprism)\nlibrary(ggrepel)\nlibrary(data.table)\nlibrary(knitr)\n```\n:::\n\n\n# Downloading genomes\n\nThe first steps of this challenge requires genome data. A very practical way to download data programmatically is to use `ncbi-genome-downlad` [program](). Here a you can see how to use it:\n\nThen using we will download complete genomes from the *Pseudomonas syringae* and drop them into the **Genome** folder. In the following line we select \\~37 genomes from the organism.\n\n\n::: {.cell hash='kmer_counts_cache/html/unnamed-chunk-1_890d069cb98ac4e6532e8ebd84c29f0c'}\n\n```{.zsh .cell-code}\nngd -n -s refseq -F fasta --genera \"Pseudomonas syringae\" -l complete bacteria\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nConsidering the following 47 assemblies for download:\nGCF_004006335.1\tPseudomonas syringae\tinb918\nGCF_014524645.1\tPseudomonas syringae\tCAS02\nGCF_016694755.2\tPseudomonas syringae\tBIM B-268\nGCF_018388485.1\tPseudomonas syringae\tKF529\nGCF_018388505.1\tPseudomonas syringae\tSusan762\nGCF_018388525.1\tPseudomonas syringae\tU643\nGCF_018394375.1\tPseudomonas syringae\tSusan2139\nGCF_023278085.1\tPseudomonas syringae\tPA-2-9E\nGCF_900235815.1\tPseudomonas syringae\tCFBP3840\nGCF_900289125.1\tPseudomonas syringae\tCFBP 2116\nGCF_002905815.2\tPseudomonas syringae pv. syringae\tPss9097\nGCF_023277945.1\tPseudomonas syringae pv. syringae\tPss9644\nGCF_900235825.1\tPseudomonas syringae pv. syringae\tCFBP4215\nGCF_900235865.1\tPseudomonas syringae pv. syringae\tCFBP2118\nGCF_002966555.1\tPseudomonas syringae pv. tomato\tB13-200\nGCF_009800225.1\tPseudomonas syringae pv. tomato\tdelta X\nGCF_016599655.1\tPseudomonas syringae pv. maculicola\tMAFF 302723\nGCF_001913215.1\tPseudomonas syringae pv. actinidiae\tICMP 20586\nGCF_001913235.1\tPseudomonas syringae pv. actinidiae\tNZ-47\nGCF_002024285.1\tPseudomonas syringae pv. actinidiae\tCRAFRU 12.29\nGCF_002024305.1\tPseudomonas syringae pv. actinidiae\tCRAFRU 14.08\nGCF_002763655.1\tPseudomonas syringae pv. actinidiae\tMAFF212063\nGCF_003665415.1\tPseudomonas syringae pv. actinidiae\tP220\nGCF_023167685.1\tPseudomonas syringae pv. actinidiae\tMAFF613020\nGCF_022557255.1\tPseudomonas syringae pv. tagetis\tICMP 4091\nGCF_003047185.1\tPseudomonas syringae pv. atrofaciens\tLMG5095\nGCF_001482725.1\tPseudomonas syringae pv. lapsa\tATCC 10859\nGCF_000012245.1\tPseudomonas syringae pv. syringae B728a\tB728a\nGCF_000007805.1\tPseudomonas syringae pv. tomato str. DC3000\tDC3000\nGCF_022557235.1\tPseudomonas syringae pv. helianthi\tLMG 5067\nGCF_900235905.1\tPseudomonas syringae group genomosp. 3\tCFBP6411\nGCF_900235885.1\tPseudomonas syringae pv. cerasicola\tCFBP6109\nGCF_000145825.2\tPseudomonas syringae Cit 7\tCit 7\nGCF_000145845.2\tPseudomonas syringae pv. maculicola str. ES4326\tES4326\nGCF_900235835.1\tPseudomonas syringae pv. avii\tCFBP3846\nGCF_000648735.3\tPseudomonas syringae pv. actinidiae ICMP 18884\tICMP 18884\nGCF_000344335.2\tPseudomonas syringae pv. actinidiae ICMP 9853\tICMP 9853\nGCF_000344355.2\tPseudomonas syringae pv. actinidiae ICMP 18708\tICMP 18708\nGCF_000344475.3\tPseudomonas syringae pv. actinidiae str. Shaanxi_M228\tShaanxi_M228\nGCF_000988485.1\tPseudomonas syringae pv. syringae B301D\tB301D\nGCF_000988395.1\tPseudomonas syringae pv. syringae HS191\tHS191\nGCF_001281365.1\tPseudomonas syringae UMAF0158\tUMAF0158\nGCF_000452705.1\tPseudomonas syringae CC1557\tCC1557\nGCF_000452605.2\tPseudomonas syringae CC440\tCC440\nGCF_000452565.2\tPseudomonas syringae UB303\tUB303\nGCF_000452525.3\tPseudomonas syringae USA011\tUSA011\nGCF_000452445.2\tPseudomonas syringae pv. pisi str. PP1\tPP1\n```\n:::\n:::\n\n::: {.cell hash='kmer_counts_cache/html/downloading_ngd_a4640b80e266f1f85cf2bcf61a0e3e5a'}\n\n```{.zsh .cell-code}\nngd -s refseq\\ \n    -F fasta\\\n    --genera \"Pseudomonas syringae\"\\\n    -l complete\\\n    --flat-output bacteria\\\n    -o Data/Genomes\n\ngzip -d Data/Genomes/*\n```\n:::\n\n\n\n# Filenames cleaning\n\n\n::: {.cell hash='kmer_counts_cache/html/unnamed-chunk-3_0e7e8da121a55593bb1cdf9c61b89270'}\n\n```{.zsh .cell-code}\npython ~/Programs/Bioinf_tools/bit-dedupe-fasta-headers.py -h\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nusage: bit-dedupe-fasta-headers.py [-h] -i INPUT_FASTA [-o OUTPUT_FASTA_NAME]\n\nThis script will append a number to headers if that exact ID has already\nappeared in the fasta file. For version info, run `bit-version`.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT_FASTA_NAME, --output_fasta_name OUTPUT_FASTA_NAME\n                        Output fasta file (default: \"Renamed.fasta\").\n\nrequired arguments:\n  -i INPUT_FASTA, --input_fasta INPUT_FASTA\n                        Starting fasta file\n```\n:::\n:::\n\n::: {.cell hash='kmer_counts_cache/html/unnamed-chunk-4_8f5711b8a8b0684eaecd4bc08c025859'}\n\n```{.zsh .cell-code}\nfor F in Genomes/*.fna ; do\n    N=$(basename $F .fna) ;\n    python /Users/camilogarcia/Programs/Bioinf_tools/bit-dedupe-fasta-headers.py -i $F -o $N_renamed.mfa ;\ndone\n```\n:::\n\n::: {.cell hash='kmer_counts_cache/html/unnamed-chunk-5_68cde609b2b032fd4ef9ffe5edfe2b59'}\n\n```{.zsh .cell-code}\nfor F in Genomes/*.fna; do\n    mv -- \"$F\" \\\n    \"$(awk 'NR==1{printf(\"%s_%s_%s\\n\",$2,$3,substr($1,2));exit}' \"$F\")\".fna\ndone\n```\n:::\n\n\n# K-mers scanning on genomes\n\n\n[![](imgs/carbon_kmer_count.png)](https://github.com/camilogarciabotero/Biolibrary)\n\n## Script help & parallel execution\n\n\n::: {.cell hash='kmer_counts_cache/html/unnamed-chunk-6_c085ea7392aee3ccb3eea1c7128bd651'}\n\n```{.zsh .cell-code}\npython ~/Projects/Biolibrary/kmer_count.py -h\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nusage: kmer_count.py [-h] [-k K] input output\n\nCount the frecuency of a k-mer set given its size (k) along a genome or a set\nof genomes\n\npositional arguments:\n  input       Path to input fasta file\n  output      Path to put file/folder output\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -k K        size of k-mer (default: 1)\n```\n:::\n:::\n\n::: {.cell hash='kmer_counts_cache/html/unnamed-chunk-7_cbfecebc44cff02db8407cbae1a755aa'}\n\n```{.zsh .cell-code}\nl ~/Projects/Random/Genomes/Pseudomonas_syringae_NZ* | parallel \"python kmer_count.py -k 2 {} {/.}.csv\"\n```\n:::\n\n::: {.cell hash='kmer_counts_cache/html/unnamed-chunk-8_9c441fc434b92445849a95a35c9b5386'}\n::: {.cell-output .cell-output-stdout}\n```\nPseudomonas_syringae_NZ_CP005969.1_9mers.csv\nPseudomonas_syringae_NZ_CP005970.1_9mers.csv\nPseudomonas_syringae_NZ_CP006256.1_9mers.csv\nPseudomonas_syringae_NZ_CP007014.1_9mers.csv\nPseudomonas_syringae_NZ_CP011972.2_9mers.csv\nPseudomonas_syringae_NZ_CP012179.1_9mers.csv\nPseudomonas_syringae_NZ_CP013183.1_9mers.csv\nPseudomonas_syringae_NZ_CP017007.1_9mers.csv\nPseudomonas_syringae_NZ_CP017009.1_9mers.csv\nPseudomonas_syringae_NZ_CP018202.1_9mers.csv\nPseudomonas_syringae_NZ_CP019730.1_9mers.csv\nPseudomonas_syringae_NZ_CP019732.1_9mers.csv\nPseudomonas_syringae_NZ_CP019871.1_9mers.csv\nPseudomonas_syringae_NZ_CP024646.1_9mers.csv\nPseudomonas_syringae_NZ_CP024712.1_9mers.csv\nPseudomonas_syringae_NZ_CP026568.1_9mers.csv\nPseudomonas_syringae_NZ_CP028490.1_9mers.csv\nPseudomonas_syringae_NZ_CP032459.1_9mers.csv\nPseudomonas_syringae_NZ_CP032631.1_9mers.csv\nPseudomonas_syringae_NZ_CP032871.1_9mers.csv\nPseudomonas_syringae_NZ_CP034078.1_9mers.csv\nPseudomonas_syringae_NZ_CP045799.1_9mers.csv\nPseudomonas_syringae_NZ_CP047073.1_9mers.csv\nPseudomonas_syringae_NZ_CP047260.1_9mers.csv\nPseudomonas_syringae_NZ_CP047267.1_9mers.csv\nPseudomonas_syringae_NZ_CP067024.1_9mers.csv\nPseudomonas_syringae_NZ_CP068034.1_9mers.csv\nPseudomonas_syringae_NZ_LT962480.1_9mers.csv\nPseudomonas_syringae_NZ_LT962481.1_9mers.csv\nPseudomonas_syringae_NZ_LT963391.1_9mers.csv\nPseudomonas_syringae_NZ_LT963402.1_9mers.csv\nPseudomonas_syringae_NZ_LT963408.1_9mers.csv\nPseudomonas_syringae_NZ_LT963409.1_9mers.csv\nPseudomonas_syringae_NZ_LT985192.1_9mers.csv\n```\n:::\n:::\n\n\n# Importing & cleaning\n\n\n::: {.cell hash='kmer_counts_cache/html/unnamed-chunk-9_7c84704a32e2d81df5badb58c86ecd7e'}\n\n```{.r .cell-code}\n# posts/2021-01-25-Kmer-analysis/\n\nfiles  <- dir_ls(\"data/Kmers\")\n\ndataset  <- files |>\n  map_df(read_csv)\n\ndataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20,709,376 × 3\n    ...1 kmer      kmer_value\n   <dbl> <chr>          <dbl>\n 1     0 AAAAAAAAA          5\n 2     1 AAAAAAAAC         21\n 3     2 AAAAAAAAT         17\n 4     3 AAAAAAAAG         17\n 5     4 AAAAAAACA         23\n 6     5 AAAAAAACC         44\n 7     6 AAAAAAACT         15\n 8     7 AAAAAAACG         29\n 9     8 AAAAAAATA         26\n10     9 AAAAAAATC         40\n# … with 20,709,366 more rows\n```\n:::\n\n```{.r .cell-code}\ntotal <- dataset |> \n  mutate(kmer = as_factor(kmer)) |> \n  group_by(kmer) |> \n  summarise(total = sum(kmer_value))\n\nsummary(total) |> \n  kable()\n```\n\n::: {.cell-output-display}\n|   |       kmer      |    total     |\n|:--|:----------------|:-------------|\n|   |AAAAAAAAA:     1 |Min.   :    3 |\n|   |AAAAAAAAC:     1 |1st Qu.:  235 |\n|   |AAAAAAAAT:     1 |Median :  509 |\n|   |AAAAAAAAG:     1 |Mean   :  819 |\n|   |AAAAAAACA:     1 |3rd Qu.: 1047 |\n|   |AAAAAAACC:     1 |Max.   :15920 |\n|   |(Other)  :262138 |NA            |\n:::\n:::\n\n\n# K-mers counts frequency plot\n\n\n::: {.cell hash='kmer_counts_cache/html/kmer-plot_d850341bf8017f4ef3ed20bf0ee4b730'}\n\n```{.r .cell-code}\nkmers_plot <- total |>\n  ggplot(aes(total)) +\n  geom_histogram(stat = \"count\", color = \"#8A8A8A\") +\n  geom_label_repel(aes(label = paste(kmer, \"appears\", max(total), \"\\n times in all genomes\"), y = 120), data = . %>% filter(total == max(total)), min.segment.length = 0, segment.colour = \"black\") +\n  geom_vline(xintercept = mean(total$total), linetype = \"dashed\", color = \"#C60000\") +\n  annotate(\"label\", label = expression(paste(mu, \"=\", 818)), x = 1100, y = 350, size = 4, colour = \"#C60000\") +\n  scale_x_continuous(guide = \"prism_offset_minor\", trans = \"log10\", limits = c(1, 18000), n.breaks = 10) +\n  theme(\n    axis.line.x = element_line(color = \"black\")\n  ) +\n  labs(\n    x = \"K-mer value [n]\",\n    y = \"Absolute frequency [n]\"\n  ) +\n  coord_cartesian(expand = F)\n\nkmers_plot_intervals <- total |>\n  mutate(intervals = cut(total, breaks = 19)) |> \n  ggplot(aes(y = intervals)) +\n  geom_histogram(stat = \"count\") +\n  scale_x_continuous(guide = \"prism_offset_minor\") +\n  theme(\n    axis.line.x  = element_line(color = \"white\")\n  ) +\n  labs(\n    x = \"Absolute frequency [n]\",\n    y = \"\"\n  ) +\n  coord_cartesian(expand = F)\n#   ggsave(\"kmers_freq_intervals_01.png\", width = 10, height = 10, dpi = 400)\n \n\nkmers_plot / kmers_plot_intervals\n```\n\n::: {.cell-output-display}\n![](kmer_counts_files/figure-html/kmer-plot-1.png){width=3000}\n:::\n\n```{.r .cell-code}\n#   ggsave(\"kmers_freq_plots_01.png\", width = 10, height = 12, dpi = 400)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}